suppressMessages(if(!require(data.table)){ install.packages("scales")})
suppressMessages(if(!require(data.table)){ install.packages("gt")})
suppressMessages(if(!require(data.table)){ install.packages("reactable")})
suppressMessages(if(!require(data.table)){ install.packages("RcppRoll")})
suppressMessages(if(!require(data.table)){ install.packages("sunburstR")})
suppressMessages(if(!require(data.table)){ install.packages("htmltools")})
suppressMessages(if(!require(data.table)){ install.packages("d3r")})
suppressMessages(if(!require(data.table)){ install.packages("openxlsx")})
suppressMessages(library(readxl))
suppressMessages(library(dplyr))
suppressMessages(library(DT))
suppressMessages(library(plyr))
suppressMessages(library(readr))
suppressMessages(library(janitor))
suppressMessages(library(shiny))
suppressMessages(library(shinydashboard))
suppressMessages(library(shinydashboardPlus))
suppressMessages(library(highcharter))
suppressMessages(library(formattable))
suppressMessages(library(highcharter))
suppressMessages(library(viridisLite))
suppressMessages(library(stringi))
suppressMessages(library(data.table))
suppressMessages(library(tidyr))
suppressMessages(library(forecast))
suppressMessages(library(kableExtra))
suppressMessages(library(shinyWidgets))
suppressMessages(library(png))
suppressMessages(library(scales))
suppressMessages(library(gt))
suppressMessages(library(reactable))
suppressMessages(library(RcppRoll))
suppressMessages(library(sunburstR))
suppressMessages(library(htmltools))
suppressMessages(library(d3r))
suppressMessages(library(openxlsx))
##################
#  Data frames   #
##################
clasificador <- data.frame(
clasi_original   = c("Caja Costarricense de Seguro Social", "Refineria de Costa Rica", "Contraloría") ,
clasi_arreglado  = c("CCSS", "RECOPE", "CGR")
)
actual <- data.frame(
id = c(1,2,3,4,5,6,7),
clasi_original = c("Caja Costarricense de Seguro Social", "Refineria de Costa Rica", "Contraloría",
"Refineria de Costa Rica", "Contraloría","","")
)
library(dplyr)
actual_1 <- dplyr::inner_join(actual, clasificador, by = "clasi_original")
actual_2 <- actual %>% dplyr::full_join(clasificador)
View(actual_2)
View(actual_1)
View(actual_2)
install.packages("RODBC")
library(RODBC)
sigaf_gasto_actual_mensual  <-  mutate(sigaf_gasto_actual_mensual,
Año = as.numeric(Año)
)
library(readxl)
data <- read_excel("C:/Users/oscar/Desktop/R ---Introducción/Tema 2/data.xlsx")
View(data)
suppressMessages(if(!require(readxl)){ install.packages("readxl")})
suppressMessages(if(!require(readxl)){ install.packages("readxl")})
suppressMessages(if(!require(dplyr)){ install.packages("dplyr")})
suppressMessages(if(!require(DT)){ install.packages("DT")})
suppressMessages(if(!require(plyr)){ install.packages("plyr")})
suppressMessages(if(!require(readr)){ install.packages("readr")})
suppressMessages(if(!require(tidyr)){ install.packages("tidyr")})
suppressMessages(if(!require(stringr)){ install.packages("stringr")})
suppressMessages(if(!require(highcharter)){ install.packages("highcharter")})
suppressMessages(if(!require(openxlsx)){ install.packages("RcppRoll")})
suppressMessages(if(!require(openxlsx)){ install.packages("openxlsx")})
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(magrittr))
suppressWarnings(library(dplyr))
suppressWarnings(library(readxl))
suppressWarnings(library(ggplot2))
suppressWarnings(library(MASS))
Boston
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
attach(Boston)
modelo_multiple <- lm( medv ~ .)
modelo_multiple <- lm(formula = medv ~ ., data = Boston)
summary(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ ., data = Boston)
ols_step_all_possible(modelo_multiple)
install.packages("olsrr")
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
modelo_multiple <- lm(formula = medv ~ ., data = Boston)
ols_step_all_possible(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ ., data = Boston)
summary(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox + lstat +black +  dis, data = Boston)
ols_step_all_possible(modelo_multiple)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
modelo_multiple <- lm(formula = medv ~ zn + crim + nox + lstat +black +  dis, data = Boston)
reactable(ols_step_all_possible(modelo_multiple)) ols_step_all_possible(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox + lstat +black +  dis, data = Boston)
ols_step_all_possible(modelo_multiple)
class(ols_step_all_possible(modelo_multiple))
reactable::reactable(modelos)
modelos <- ols_step_all_possible(modelo_multiple)
reactable::reactable(modelos)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +  dis + indus, data = Boston)
modelos <- ols_step_all_possible(modelo_multiple)
reactable::reactable(modelos)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
modelos <- ols_step_all_possible(modelo_multiple)
reactable::reactable(modelos)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
step(modelo_multiple,direction="backward")
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
step(modelo_multiple,direction="forward")
stepAIC(modelo_multiple,direction="forward")
stepAIC(modelo_multiple,direction="forward")
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
step(modelo_multiple,direction="both")
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
step(modelo_multiple,direction="backward")
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
stepAIC(modelo_multiple,direction="backward")
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
ols_step_backward_p(modelo_multiple, details = TRUE)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
ols_step_forward_p(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
ols_step_both_p(modelo_multiple)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
suppressWarnings(library(modelr))
summary(modelo_multiple)
install.packages("modelr")
install.packages("broom")
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
suppressWarnings(library(modelr))
suppressWarnings(library(broom))
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
summary(modelo_multiple)
AIC(modelo_multiple)
BIC(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
modelos <- ols_step_all_possible(modelo_multiple)
reactable::reactable(modelos)
modelo_multiple <- lm(formula = medv ~ zn + crim + nox +age + lstat +black +indus, data = Boston)
modelos <- ols_step_all_possible(modelo_multiple)
reactable::reactable(modelos)
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(MASS))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
suppressWarnings(library(modelr))
suppressWarnings(library(broom))
suppressWarnings(library(ggpubr))
suppressWarnings(library(nortest))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lmtest))
suppressWarnings(library(corrplot))
suppressWarnings(library(RColorBrewer))
suppressWarnings(library(car))
suppressWarnings(library(olsrr))
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
residuos <- summary(modelo_multiple)$residuals
ggplot(data = Boston, aes(y = residuos, x = medv)) + geom_point(col = 'blue') + geom_abline(slope = 0)
plot(modelo_multiple, 1)
plot(modelo_multiple, 3)
plot(residuos)
ggpubr::ggdensity(residuos,  fill = "lightgray", add = "mean",  xlab = "Residuos de la RLM")
n <- nrow(Boston)
k <- length(modelo_multiple$coefficients)-1
cv <- 2*sqrt(k/n)
plot(dffits(modelo_multiple),
ylab = "Standardized dfFits", xlab = "Index",
main = paste("Standardized DfFits, \n critical value = 2*sqrt(k/n) = +/-", round(cv,3)))
#Critical Value horizontal lines
abline(h = cv, lty = 2)
abline(h = -cv, lty = 2)
plot(modelo_multiple, 4)
plot(modelo_multiple, 5)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_dfbetas(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_dfbetas(modelo_multiple)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
ols_plot_resid_lev(modelo_multiple)
installed.packages("taskscheduleR", dependency= TRUE)
install.packages("taskscheduleR")
devtools::install_github("rstudio/addinexamples", type = "source")
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
knitr::opts_chunk$set(echo = TRUE)
suppressWarnings(library(readxl))
suppressWarnings(library(MASS))
suppressWarnings(library(faraway))
suppressWarnings(library(stats))
suppressWarnings(library(psych))
suppressWarnings(library(olsrr))
suppressWarnings(library(reactable))
suppressWarnings(library(modelr))
suppressWarnings(library(broom))
suppressWarnings(library(ggpubr))
suppressWarnings(library(nortest))
suppressWarnings(library(ggplot2))
suppressWarnings(library(lmtest))
suppressWarnings(library(corrplot))
suppressWarnings(library(RColorBrewer))
suppressWarnings(library(car))
suppressWarnings(library(olsrr))
suppressWarnings(library(glmnet))
suppressWarnings(library(quantreg))
# Importar archivos
initech <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/initech.xlsx")
autompg <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/autompg.xlsx")
marketing <- read_excel("C:/Users/oscar/Desktop/E. Medidas remediales/marketing.xlsx")
# create dataframe
df1 = data.frame(Name = c('George','Andrea', 'Micheal','Maggie','Ravi','Xien','Jalpa'),
Grade_score=c(4,6,2,9,5,7,8),
Mathematics1_score=c(45,78,44,89,66,49,72),
Science_score=c(56,52,45,88,33,90,47))
df1
df2<-subset(df1, Name!="George" & Name!="Andrea")
df2
library(dplyr)
df2 <- df1 %>% slice(-c(2, 4, 6))
df2
mtcars$disp[which(mtcars$disp >420)] <- c(mtcars$disp[which(mtcars$disp >420)]*2)
boxplot(mtcars$disp)
boxplot(mtcars$disp, plot=TRUE)$out
outliers <- boxplot(mtcars$disp, plot=FALSE)$out
print(outliers)
mtcars[which(mtcars$disp %in% outliers),]
mtcars <- mtcars[-which(mtcars$disp %in% outliers),]
boxplot(mtcars$disp)
tail(Boston)
modelo_multiple <- lm(formula = medv ~ crim + indus+ age +  tax + black + lstat, data = Boston)
residuos <- summary(modelo_multiple)$residuals
boxplot(residuos)
library(dplyr)
residuos <- as.data.frame(residuos)
dim(residuos)
dim(Boston)
Boston <- bind_cols(Boston,residuos)
dim(Boston)
boxplot(Boston$residuos, plot=FALSE)$out
outliers <- boxplot(Boston$residuos, plot=FALSE)$out
print(outliers)
Boston[which(Boston$residuos %in% outliers),]
Boston <-  Boston[-which(Boston$residuos %in% outliers),]
boxplot(Boston$residuos)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
hist(initech$salary)
boxplot(initech$salary)
initech_fit = lm(salary ~ years, data = initech)
summary(initech_fit)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit, col = "darkorange", lwd = 2)
initech_fit = lm(salary ~ years, data = initech)
summary(initech_fit)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit), resid(initech_fit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
par(mfrow = c(1, 2))
plot(fitted(initech_fit), resid(initech_fit), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit_log), resid(initech_fit_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit_log), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit_log), col = "dodgerblue", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
initech_fit_log = lm(log(salary) ~ years, data = initech)
plot(log(salary) ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
abline(initech_fit_log, col = "darkorange", lwd = 2)
plot(salary ~ years, data = initech, col = "grey", pch = 20, cex = 1.5,
main = "Salaries at Initech, By Seniority")
curve(exp(initech_fit_log$coef[1] + initech_fit_log$coef[2] * x),
from = 0, to = 30, add = TRUE, col = "darkorange", lwd = 2)
par(mfrow = c(1, 2))
plot(fitted(initech_fit_log), resid(initech_fit_log), col = "grey", pch = 20,
xlab = "Fitted", ylab = "Residuals", main = "Fitted versus Residuals")
abline(h = 0, col = "darkorange", lwd = 2)
qqnorm(resid(initech_fit_log), main = "Normal Q-Q Plot", col = "darkgrey")
qqline(resid(initech_fit_log), col = "dodgerblue", lwd = 2)
savings_model = lm(sr ~ ., data = savings)
boxcox(savings_model, plotit = TRUE)
"![](boxcox.png)"
boxcox(savings_model, plotit = TRUE, lambda = seq(0.5, 1.5, by = 0.1))
plot(fitted(savings_model), resid(savings_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
gala_model = lm(Species ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model), resid(gala_model), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
boxcox(gala_model, lambda = seq(-0.25, 0.75, by = 0.05), plotit = TRUE)
gala_model_cox = lm((((Species ^ 0.3) - 1) / 0.3) ~ Area + Elevation + Nearest + Scruz + Adjacent, data = gala)
plot(fitted(gala_model_cox), resid(gala_model_cox), col = "dodgerblue",
pch = 20, cex = 1.5, xlab = "Fitted", ylab = "Residuals")
abline(h = 0, lty = 2, col = "darkorange", lwd = 2)
boxcox(initech_fit)
mark_mod = lm(sales ~ advert, data = marketing)
summary(mark_mod)
library(glmnet)
model <- glmnet(x, y, alpha = 0)
summary(model)
#perform k-fold cross-validation to find optimal lambda value
cv_model <- cv.glmnet(x, y, alpha = 0)
#find optimal lambda value that minimizes test MSE
best_lambda <- cv_model$lambda.min
best_lambda
#produce plot of test MSE by lambda value
plot(cv_model)
q("no", 1, FALSE)
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
suppressWarnings(library(taskscheduleR))
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduleR:::taskschedulerAddin()
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:\\Users\\oscar\\Desktop\\Ingresos - SIGAF\\AI ---\\AI_WEB\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%m/%d/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:\\Users\\oscar\\Desktop\\Ingresos - SIGAF\\AI ---\\AI_WEB\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%m/%d/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:\\Users\\oscar\\Desktop\\Ingresos - SIGAF\\AI ---\\AI_WEB\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%m/%d/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:\\Users\\oscar\\Desktop\\Ingresos - SIGAF\\AI ---\\AI_WEB\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%m/%d/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:\\Users\\oscar\\Desktop\\Ingresos - SIGAF\\AI ---\\AI_WEB\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%M/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
setwd("C:/Users/oscar/Desktop/automat/mtcars")
taskscheduler_create(
taskname = "mtcars_export",
rscript = "C:\\Users\\oscar\\Desktop\\automat\\mtcars\\AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%M/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskscheduler_create(
taskname = "mtcars_export",
rscript = "C:\\Users\\oscar\\Desktop\\automat\\mtcars\\mtcars_export.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%M/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
setwd("C:/Users/oscar/Desktop/automat/mtcars")
taskscheduler_create(
taskname = "mtcars_export",
rscript = "C:/Users/oscar/Desktop/automat/mtcars/mtcars_export.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%M/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
file.exists("C:/Users/oscar/Desktop/automat/mtcars/mtcars_export.r")
taskscheduler_create(
taskname = "mtcars_export",
rscript = "C:/Users/oscar/Desktop/automat/mtcars/mtcars_export.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%m/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
setwd("C:/Users/oscar/Desktop/Ingresos - SIGAF/AI ---/AI_WEB")
taskscheduler_create(
taskname = "AI_SAF",
rscript = "C:/Users/oscar/Desktop/Ingresos - SIGAF/AI ---/AI_WEB/AI_SAF.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%m/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
taskschedulerAddin(
)
taskscheduler_ls()
taskscheduler_runnow("AI_SAF")
taskcheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
Sys.Date()
Sys.Date() ; format(Sys.Date(), "%d/%m/%Y")
hours()
Sys.timezone()
Sys.time()
length(Sys.time())
setwd("C:/Users/oscar/Desktop/Regla fiscal/RF --- REVOLUTION/RF_WEB")
taskscheduler_create(
taskname = "RF_GC",
rscript = "C:/Users/oscar/Desktop/Regla fiscal/RF --- REVOLUTION/RF_WEB/RF_GC.r",
schedule = "HOURLY",
starttime = format(Sys.time()+62,"%H:%M"),
startdate = format(Sys.Date(), "%d/%m/%Y"),
Rexe = file.path(Sys.getenv("R_HOME"),"bin","Rscript.exe")
)
class(Sys.time())
Sys.time()
substr(Sys.time(),6,7)
substr(Sys.time(),12,20)
Sys.time()
substr(Sys.time(),12,20)
taskscheduleR:::taskschedulerAddin()
taskscheduler_stop("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_runnow("AI_SAF")
taskscheduler_stop("AI_SAF")
taskscheduler_runnow("AI_SAF")
